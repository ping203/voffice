//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VOffice.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VOfficeEntities : DbContext
    {
        public VOfficeEntities()
            : base("name=VOfficeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<MeetingRoom> MeetingRooms { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventUserNotify> EventUserNotifies { get; set; }
        public virtual DbSet<ImportantJob> ImportantJobs { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetGroup> AspNetGroups { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DocumentAttachment> DocumentAttachments { get; set; }
        public virtual DbSet<DocumentDelivered> DocumentDelivereds { get; set; }
        public virtual DbSet<DocumentDocumentField> DocumentDocumentFields { get; set; }
        public virtual DbSet<DocumentField> DocumentFields { get; set; }
        public virtual DbSet<DocumentFieldDepartment> DocumentFieldDepartments { get; set; }
        public virtual DbSet<DocumentHistory> DocumentHistories { get; set; }
        public virtual DbSet<DocumentOpinion> DocumentOpinions { get; set; }
        public virtual DbSet<DocumentOpinionAttachment> DocumentOpinionAttachments { get; set; }
        public virtual DbSet<DocumentReceived> DocumentReceiveds { get; set; }
        public virtual DbSet<DocumentRecipent> DocumentRecipents { get; set; }
        public virtual DbSet<DocumentSignedBy> DocumentSignedBies { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<ExternalSendReceiveDivision> ExternalSendReceiveDivisions { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentStaff> DepartmentStaffs { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<ApplicationLogging> ApplicationLoggings { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<SystemConfig> SystemConfigs { get; set; }
        public virtual DbSet<SystemConfigDepartment> SystemConfigDepartments { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskAssignee> TaskAssignees { get; set; }
        public virtual DbSet<TaskAttachment> TaskAttachments { get; set; }
        public virtual DbSet<TaskDocument> TaskDocuments { get; set; }
        public virtual DbSet<TaskOpinion> TaskOpinions { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
    
        public virtual ObjectResult<SPGetCustomer_Result> SPGetCustomer(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCustomer_Result>("SPGetCustomer", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetMeetingRoom_Result> SPGetMeetingRoom(string keyword, string departmentId, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetMeetingRoom_Result>("SPGetMeetingRoom", keywordParameter, departmentIdParameter, startParameter, limitParameter, total);
        }
    
        [DbFunction("VOfficeEntities", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[VOfficeEntities].[fn_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SPGetDocumentSignedBy_Result> SPGetDocumentSignedBy(string keyword, Nullable<bool> receivedDocument, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var receivedDocumentParameter = receivedDocument.HasValue ?
                new ObjectParameter("receivedDocument", receivedDocument) :
                new ObjectParameter("receivedDocument", typeof(bool));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentSignedBy_Result>("SPGetDocumentSignedBy", keywordParameter, receivedDocumentParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetDocumentType_Result> SPGetDocumentType(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetDocumentType_Result>("SPGetDocumentType", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetConfig_Result> SPGetConfig(string keyword, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetConfig_Result>("SPGetConfig", keywordParameter, startParameter, limitParameter, total);
        }
    
        public virtual ObjectResult<SPGetSystemConfigDepartment_Result> SPGetSystemConfigDepartment(string keyword, Nullable<int> departmentID, Nullable<int> start, Nullable<int> limit, ObjectParameter total)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSystemConfigDepartment_Result>("SPGetSystemConfigDepartment", keywordParameter, departmentIDParameter, startParameter, limitParameter, total);
        }
    }
}
